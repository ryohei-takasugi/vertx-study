/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.sample.vertx1;

import io.vertx.config.ConfigRetriever;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import jp.sample.vertx1.Handlers.EchoHandler;
import jp.sample.vertx1.Handlers.HomeHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** main. */
public class App extends AbstractVerticle {

    /** logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    private static final String CONTENT_TYPE = "application/json";

    /**
     * vert.x start.
     *
     * @param startPromise vert.x start promise.
     * @return null.
     */
    @Override
    public void start(Promise<Void> startPromise) {
      JsonObject config = getConfig();

      Router router = getRouter(config);

      final HttpServerOptions httpOptions = new HttpServerOptions(config.getJsonObject("http"));

      HttpServer server = vertx.createHttpServer(httpOptions);
      server.requestHandler(router).listen();

      LOGGER.info("listen start. port: " + httpOptions.getPort());
    }

    /**
     * load vert.x config (run option -conf config/config.json)
     *
     * @return config
     */
    private JsonObject getConfig() {
        final ConfigRetriever retriever = ConfigRetriever.create(vertx);
        JsonObject config = new JsonObject();
        retriever.getConfig(
                ar -> {
                    if (ar.succeeded()) {
                        config.mergeIn(ar.result());
                    }
                });
        return config;
    }

    /**
     * Create Router
     * 
     * @param config
     * @return router
     */
    private Router getRouter(JsonObject config) {
      Router router = Router.router(vertx);
      router.get("/").produces(CONTENT_TYPE).handler(HomeHandler.create());
      router.get("/echo").produces(CONTENT_TYPE).handler(EchoHandler.create(config));

      return router;
    }
}
