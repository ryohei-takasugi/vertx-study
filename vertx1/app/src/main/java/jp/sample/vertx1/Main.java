/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.sample.vertx1;

import io.vertx.config.ConfigRetriever;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.CompositeFuture;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import jp.sample.vertx1.ClientServices.ClientServiceVerticle;
import jp.sample.vertx1.MainServices.MainServiceVerticle;

/** main. */
public class Main extends AbstractVerticle {

  /**
   * vert.x start.
   *
   * @param startPromise vert.x start promise.
   */
  @Override
  public void start(Promise<Void> startPromise) {
    JsonObject config = getConfig();
    DeploymentOptions option = new DeploymentOptions().setConfig(config);
    Future<String> main = vertx.deployVerticle(MainServiceVerticle.class, option);
    Future<String> client = vertx.deployVerticle(ClientServiceVerticle.class, option);
    CompositeFuture.all(main, client)
        .onComplete(
            ar -> {
              if (ar.succeeded()) {
                startPromise.complete();
              } else {
                startPromise.fail(ar.cause());
              }
            });
  }

  /**
   * load vert.x config (run option -conf config/config.json)
   *
   * @return config
   */
  private JsonObject getConfig() {
    final ConfigRetriever retriever = ConfigRetriever.create(vertx);
    JsonObject config = new JsonObject();
    retriever.getConfig(
        ar -> {
          if (ar.succeeded()) {
            config.mergeIn(ar.result());
          }
        });
    return config;
  }
}
