/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/building_java_projects.html
 */

// ---------------------------------------------
// use gradle plugins
// ---------------------------------------------
plugins {
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
	id 'eclipse'
	id 'com.diffplug.spotless' version '6.8.0'
	id 'com.github.johnrengelman.shadow' version '7.1.0'
}

// ---------------------------------------------
// use repository servers
// ---------------------------------------------
repositories {
	// Use JCenter for resolving dependencies.
	mavenCentral()
	jcenter()
	mavenLocal()
}

// ---------------------------------------------
// use libraries
// ---------------------------------------------
dependencies {
	// vert.x
	implementation "io.vertx:vertx-web:$vertxVersion"
	implementation "io.vertx:vertx-core:$vertxVersion"
	implementation "io.vertx:vertx-config:$vertxVersion"

	// logger
	implementation "org.slf4j:slf4j-api:$slf4jVersion"
	implementation "ch.qos.logback:logback-core:$logbackVersion"
	implementation "ch.qos.logback:logback-classic:$logbackVersion"

	// Use JUnit Jupiter API for testing.
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

	// Use JUnit Jupiter Engine for testing.
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	// This dependency is used by the application.
	implementation 'com.google.guava:guava:29.0-jre'
}

// ---------------------------------------------
// java compile options
// ---------------------------------------------
java {
	sourceCompatibility = JavaVersion.VERSION_11
}

// ---------------------------------------------
// vert.x main class
// ---------------------------------------------
application {
	// Define the main class for the application.
	mainClass = 'io.vertx.core.Launcher'
}

// ---------------------------------------------
// eclipse plugin options
// ---------------------------------------------
eclipse {
	project {
		name = rootProject.name
	}
}
// create settings/org.eclipse.buildship.core.prefs
tasks.eclipse.doFirst {
		File prefs = file(".settings/org.eclipse.buildship.core.prefs")
		if(!prefs.exists()){
				prefs.append('''
						connection.project.dir=
						eclipse.preferences.version=1
						'''.stripIndent())
		}
}

// ---------------------------------------------
// test options
// ---------------------------------------------
tasks.named('test') {
	// Use junit platform for unit tests.
	useJUnitPlatform()
}

// ---------------------------------------------
// gradlew run
// ---------------------------------------------
mainClassName = 'io.vertx.core.Launcher'
def mainVerticleName = "${modowner}.${modname}"

// Vert.x watches for file changes in all subdirectories
// of src/ but only for files with .java extension
def watchForChange = 'src/**/*.java'

// Vert.x will call this task on changes
def doOnChange = ".${File.separator}gradlew classes"

run {
	args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange", runModArgs]
}

// ---------------------------------------------
// compile options (shadowJar)
// ---------------------------------------------
shadowJar {
	classifier = 'fat'

	manifest {
			attributes "Main-Verticle": mainVerticleName
	}

	mergeServiceFiles {
		include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
	}
}

// ---------------------------------------------
// code formater
// ---------------------------------------------
spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore', '.java'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs(2) // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java
		importOrder()
		// apply a specific flavor of google-java-format
		googleJavaFormat('1.8').aosp().reflowLongStrings()
		// fix formatting of type annotations
		// formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		// licenseHeader '/* (C)$YEAR */'
	}
	json {
		target("src/**/*.json")                         // you have to set the target manually
		// simple().indentWithSpaces(2)                 // has its own section below
		// prettier().config(mapOf("parser" to "json")) // see Prettier section below
		// eclipseWtp("json")                           // see Eclipse web tools platform section
		gson().indentWithSpaces(2)                      // has its own section below
	}
}
